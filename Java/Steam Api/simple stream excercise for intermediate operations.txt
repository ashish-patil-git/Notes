 1. Find all transactions in the year 2011 and sort them by value (small to high)

	transactions.stream()
	.filter(t -> t.getYear() == 2011 )
	.sorted(Comparator.comparing(Transaction::getValue))
	.collect(Collectors.toList());

2. What are all the unique cities where the traders work?

	transaction.stream()
	.map(t -> t.getTrader().getCity())
	.distinct()
	.collect(Collectors.toList());

3. Find all traders from Cambridge and sort them by name.


	transaction.stream()
	.map(Transaction::getTrader)
	.filter(t -> t.getCity().equals("Cambridge"))
	.distinct()
	.sorted(Comparator.comparing(Traders::getName))
	.collect(Collectors.toList());

4. Return a string of all traders’ names sorted alphabetically.

transaction.stream()
	.map(Transaction::getTrader)
	.map(Trader::getName)
	.distinct()
	.sorted()
	.collect(Collectors.joining());

 5. Are any traders based in Milan?
 	transaction.stream()
 	.anyMatch(t -> t.getTrader().getCity().equals("Milan"))

6. Print all transactions’ values from the traders living in Cambridge.

	transactions.stream()
	.filter(t -> t.getTrader().getCity().equals("Cambridge"))
	.collect(Collectors.joining("; "));

	transactions.stream()
	.filter(t -> t.getTrader().getCity().equals("Cambridge"))
	.map(Transaction::getValue)
	.forEach(System.out::println)

7. What’s the highest value of all the transactions?

	transactions.stream()
	.map(Transaction::getValue)
	.reduce(Intger::max).orElse(new Integer(0));

8. Find the transaction with the smallest value.

	transactions.stream()
	.map(Transaction::getValue)
	.reduce(0, Intger::min);
